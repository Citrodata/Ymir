==================================
Games that contain race conditions
==================================

Virtua Fighter
  The game stores a matrix stack pointer at 0x60435E8, which points to the stack starting at 0x6042FE8 where each matrix
  takes 0x30 bytes. The pointer and the stack are read and written by both SH-2 CPUs simultaneously. Immediately before
  the matrix area, the game stores some VDP2 parameters.

  The master CPU runs a routine at 0x60279AC that clears the cache address array (6xxxxxxx), requests the slave CPU to
  run its routine, then proceeds with vector/matrix calculations using the matrix stack pointer.

  The slave CPU routine at 0x601B11C clears the cache address array, overwrites the matrix at the top of the stack then
  does vector/matrix math with the same pointer as above. The slave CPU may also run other routines, including one at
  0x601020C that also does a bit of matrix math in a more convoluted call tree.

  The two CPUs compete for the stack and the pointer, which is incremented or decremented in steps of 0x30. Because the
  code doesn't try to synchronize accesses to the pointer, the CPUs will on occasion work with two different copies of
  the stack pointer.

  All routines make use of functions that push and pop matrices from the stack, updating the stack pointer accordingly.

  The push matrix function (at 0x60065BC) does the following sequence of operations with the stack pointer:

	1. Read the pointer from 0x60435E8 into R4
	2. Set 0x30 to R5
	3. Add R4 into R5
	4. Write R5 to 0x60435E8

  The pop matrix function (at 0x6006608) does these operations to the stack pointer:
  
	1. Read the pointer from 0x60435E8 into R4
	2. Subtract 0x30 from R4
	3. Return from subroutine (`rts`)
	4. (Delay slot) Write R4 to 0x60435E8

  Those sequences of operations are not atomic. If one CPU happens to read the pointer before the other CPU writes the
  modified value, the matrix stack pointer gets desynchronized, resulting in an extra offset of +0x30 or -0x30 depending
  on which CPU writes the updated value last.

  If the pointer decrements past 0x6042FE8, matrix data overwrites the area reserved by the game for VDP2 parameters,
  resulting in corrupted or distorted backgrounds and UI. If the pointer increments past 0x60435E8, the pointer itself
  gets corrupted and the game attempts to read from random areas, usually resulting in a Ring Out for player 1, some
  serious 3D graphics distortion or the 3D graphics disappearing.

Fighters Megamix
  During early initialization, the MSH2 starts the SSH2 command processing loop, writes some commands to the table then
  dangerously updates the command pointers. If the two CPUs aren't tightly synchronized, there's a risk of leaving the
  command table and/or pointers in an inconsistent state, causing the SSH2 to jump into NULL.

name: Build

on:
  push:
    branches:
      - main
  pull_request:

jobs:
  build-windows-x64:
    name: windows-x64
    runs-on: windows-2025

    steps:
      # Set up MASM for lzma
      - uses: glslang/setup-masm@v1

      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Set reusable strings
        id: strings
        shell: bash
        run: |
          echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

      - name: Configure CMake
        run: >
          cmake -B ${{ steps.strings.outputs.build-output-dir }}
          -DCMAKE_CXX_COMPILER=clang++
          -DCMAKE_C_COMPILER=clang
          -DCMAKE_BUILD_TYPE=Debug
          -DBUILD_SHARED_LIBS=OFF
          -DYmir_ENABLE_DEVLOG=OFF
          -DYmir_ENABLE_IMGUI_DEMO=OFF
          -DYmir_ENABLE_SANDBOX=OFF
          -DYmir_ENABLE_YMDASM=ON
          -S ${{ github.workspace }}
          -G Ninja

      - name: Build
        run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --parallel

  # build-windows-a64:
  #   name: windows-a64
  #   # runs-on: windows-11-arm
  #   runs-on: windows-latest

  #   steps:
  #     - uses: actions/checkout@v4
  #       with:
  #         submodules: recursive

  #     - name: Set reusable strings
  #       id: strings
  #       shell: bash
  #       run: |
  #         echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

  #     - name: Configure CMake
  #       run: >
  #         cmake -B ${{ steps.strings.outputs.build-output-dir }}
  #         -DCMAKE_CXX_COMPILER="C:\Program Files\LLVM\bin\clang++.exe"
  #         -DCMAKE_C_COMPILER="C:\Program Files\LLVM\bin\clang.exe"
  #         -DCMAKE_LINKER="C:\Program Files\LLVM\bin\lld-link.exe"
  #         -DCMAKE_CXX_FLAGS="--target=arm64-pc-windows-gnullvm"
  #         -DCMAKE_C_FLAGS="--target=arm64-pc-windows-gnullvm"
  #         -DCMAKE_BUILD_TYPE=Debug
  #         -DBUILD_SHARED_LIBS=OFF
  #         -DYmir_ENABLE_DEVLOG=OFF
  #         -DYmir_ENABLE_IMGUI_DEMO=OFF
  #         -DYmir_ENABLE_SANDBOX=OFF
  #         -DYmir_ENABLE_YMDASM=ON
  #         -S ${{ github.workspace }}
  #         -G Ninja

  #     - name: Build
  #       run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --parallel

  build-linux-x64:
    name: linux-x64
    runs-on: ubuntu-24.04

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Set reusable strings
        id: strings
        shell: bash
        run: |
          echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

      - name: Install SDL3 Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install build-essential git make pkg-config \
            cmake ninja-build gnome-desktop-testing \
            libasound2-dev libpulse-dev libaudio-dev \
            libjack-dev libsndio-dev libx11-dev \
            libxext-dev libxrandr-dev libxcursor-dev \
            libxfixes-dev libxi-dev libxss-dev \
            libxtst-dev libxkbcommon-dev libdrm-dev \
            libgbm-dev libgl1-mesa-dev libgles2-mesa-dev \
            libegl1-mesa-dev libdbus-1-dev libibus-1.0-dev \
            libudev-dev

      - name: Configure CMake
        run: >
          cmake -B ${{ steps.strings.outputs.build-output-dir }}
          -DCMAKE_CXX_COMPILER=clang++
          -DCMAKE_C_COMPILER=clang
          -DCMAKE_BUILD_TYPE=Debug
          -DBUILD_SHARED_LIBS=OFF
          -DYmir_ENABLE_DEVLOG=OFF
          -DYmir_ENABLE_IMGUI_DEMO=OFF
          -DYmir_ENABLE_SANDBOX=OFF
          -DYmir_ENABLE_YMDASM=ON
          -S ${{ github.workspace }}
          -G Ninja

      - name: Build
        run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --parallel

  build-linux-a64:
    name: linux-a64
    runs-on: ubuntu-24.04-arm

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Set reusable strings
        id: strings
        shell: bash
        run: |
          echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

      - name: Install SDL3 Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install build-essential git make pkg-config \
            cmake ninja-build gnome-desktop-testing \
            libasound2-dev libpulse-dev libaudio-dev \
            libjack-dev libsndio-dev libx11-dev \
            libxext-dev libxrandr-dev libxcursor-dev \
            libxfixes-dev libxi-dev libxss-dev \
            libxtst-dev libxkbcommon-dev libdrm-dev \
            libgbm-dev libgl1-mesa-dev libgles2-mesa-dev \
            libegl1-mesa-dev libdbus-1-dev libibus-1.0-dev \
            libudev-dev

      - name: Configure CMake
        run: >
          cmake -B ${{ steps.strings.outputs.build-output-dir }}
          -DCMAKE_CXX_COMPILER=clang++
          -DCMAKE_C_COMPILER=clang
          -DCMAKE_BUILD_TYPE=Debug
          -DBUILD_SHARED_LIBS=OFF
          -DYmir_ENABLE_DEVLOG=OFF
          -DYmir_ENABLE_IMGUI_DEMO=OFF
          -DYmir_ENABLE_SANDBOX=OFF
          -DYmir_ENABLE_YMDASM=ON
          -S ${{ github.workspace }}
          -G Ninja

      - name: Build
        run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --parallel

  build-macos:
    name: macos-${{ matrix.arch.name }}
    runs-on: macos-latest

    strategy:
      fail-fast: false

      matrix:
        arch:
          - name: "universal"
            isa_name: "'x86_64;arm64'"

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Set reusable strings
        id: strings
        shell: bash
        run: |
          echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

      - name: Configure CMake
        run: >
          cmake -B ${{ steps.strings.outputs.build-output-dir }}
          -DCMAKE_BUILD_TYPE=Debug
          -DBUILD_SHARED_LIBS=OFF
          -DCMAKE_OSX_ARCHITECTURES=${{ matrix.arch.isa_name }}
          -DYmir_ENABLE_DEVLOG=OFF
          -DYmir_ENABLE_IMGUI_DEMO=OFF
          -DYmir_ENABLE_SANDBOX=OFF
          -DYmir_ENABLE_YMDASM=ON
          -S ${{ github.workspace }}
          -G Ninja

      - name: Build
        run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --parallel
